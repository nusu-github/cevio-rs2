// Bindings generated by `windows-bindgen` 0.57.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod Talk {
    pub mod RemoteService2 {
        windows_core::imp::define_interface!(
            IPhonemeData2,
            IPhonemeData2_Vtbl,
            0xa409140f_b7a5_48ef_893e_8b971420e05a
        );
        impl core::ops::Deref for IPhonemeData2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IPhonemeData2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IPhonemeData2 {
            pub unsafe fn Phoneme(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Phoneme)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn StartTime(&self) -> windows_core::Result<f64> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).StartTime)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn EndTime(&self) -> windows_core::Result<f64> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).EndTime)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        #[repr(C)]
        pub struct IPhonemeData2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Phoneme: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub StartTime: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut f64,
            ) -> windows_core::HRESULT,
            pub EndTime: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut f64,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IPhonemeDataArray2,
            IPhonemeDataArray2_Vtbl,
            0x96c207d5_b547_485f_8538_96a5be0c73b6
        );
        impl core::ops::Deref for IPhonemeDataArray2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IPhonemeDataArray2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IPhonemeDataArray2 {
            pub unsafe fn Length(&self) -> windows_core::Result<i32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Length)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn At(&self, index: i32) -> windows_core::Result<IPhonemeData2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).At)(
                    windows_core::Interface::as_raw(self),
                    index,
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Duplicate(&self) -> windows_core::Result<IPhonemeDataArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Duplicate)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        #[repr(C)]
        pub struct IPhonemeDataArray2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Length: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub At: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Duplicate: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IServiceControl2,
            IServiceControl2_Vtbl,
            0xf726d3e2_5a0f_4ca7_9029_d3549d594350
        );
        impl core::ops::Deref for IServiceControl2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IServiceControl2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IServiceControl2 {
            pub unsafe fn IsHostStarted(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).IsHostStarted)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn StartHost<P0>(&self, nowait: P0) -> windows_core::Result<i32>
            where
                P0: windows_core::Param<windows::Win32::Foundation::VARIANT_BOOL>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).StartHost)(
                    windows_core::Interface::as_raw(self),
                    nowait.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn CloseHost(&self, mode: i32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).CloseHost)(
                    windows_core::Interface::as_raw(self),
                    mode,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct IServiceControl2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub IsHostStarted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub StartHost: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows::Win32::Foundation::VARIANT_BOOL,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub CloseHost:
                unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IServiceControl2V40,
            IServiceControl2V40_Vtbl,
            0x5318f2d5_9973_4a11_a2d7_80fb823b7f9f
        );
        impl core::ops::Deref for IServiceControl2V40 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IServiceControl2V40,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IServiceControl2V40 {
            pub unsafe fn HostVersion(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).HostVersion)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn InterfaceVersion(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).InterfaceVersion)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn IsHostStarted(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).IsHostStarted)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn StartHost<P0>(&self, nowait: P0) -> windows_core::Result<i32>
            where
                P0: windows_core::Param<windows::Win32::Foundation::VARIANT_BOOL>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).StartHost)(
                    windows_core::Interface::as_raw(self),
                    nowait.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn CloseHost(&self, mode: i32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).CloseHost)(
                    windows_core::Interface::as_raw(self),
                    mode,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct IServiceControl2V40_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub HostVersion: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub InterfaceVersion: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub IsHostStarted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub StartHost: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                windows::Win32::Foundation::VARIANT_BOOL,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub CloseHost:
                unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IServiceControl2V40Part,
            IServiceControl2V40Part_Vtbl,
            0x0d1ef04d_07ee_4caf_a424_e7819be41516
        );
        impl core::ops::Deref for IServiceControl2V40Part {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IServiceControl2V40Part,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IServiceControl2V40Part {
            pub unsafe fn HostVersion(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).HostVersion)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn InterfaceVersion(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).InterfaceVersion)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        #[repr(C)]
        pub struct IServiceControl2V40Part_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub HostVersion: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub InterfaceVersion: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ISpeakingState2,
            ISpeakingState2_Vtbl,
            0xee2e846d_0120_4a31_a95b_14004d7cf730
        );
        impl core::ops::Deref for ISpeakingState2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ISpeakingState2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ISpeakingState2 {
            pub unsafe fn IsSucceeded(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).IsSucceeded)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn IsCompleted(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).IsCompleted)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn Wait(&self) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).Wait)(windows_core::Interface::as_raw(self))
                    .ok()
            }
            pub unsafe fn Wait_2(&self, timeoutseconds: f64) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).Wait_2)(
                    windows_core::Interface::as_raw(self),
                    timeoutseconds,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct ISpeakingState2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub IsSucceeded: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub IsCompleted: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub Wait: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
            pub Wait_2:
                unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            IStringArray2,
            IStringArray2_Vtbl,
            0x37f03f6e_9c51_4e32_bf31_761c6bc87aac
        );
        impl core::ops::Deref for IStringArray2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            IStringArray2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl IStringArray2 {
            pub unsafe fn Length(&self) -> windows_core::Result<i32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Length)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn At(&self, index: i32) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).At)(
                    windows_core::Interface::as_raw(self),
                    index,
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Duplicate(&self) -> windows_core::Result<IStringArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Duplicate)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        #[repr(C)]
        pub struct IStringArray2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Length: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub At: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i32,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub Duplicate: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ITalker2,
            ITalker2_Vtbl,
            0xf5eed82f_a947_4b66_9411_4074ea111879
        );
        impl core::ops::Deref for ITalker2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ITalker2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ITalker2 {
            pub unsafe fn Volume(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Volume)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetVolume(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetVolume)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Speed(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Speed)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetSpeed(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetSpeed)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Tone(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Tone)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetTone(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetTone)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Alpha(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Alpha)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetAlpha(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetAlpha)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Components(&self) -> windows_core::Result<ITalkerComponentArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Components)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Cast(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Cast)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn SetCast<P0>(&self, pretval: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                (windows_core::Interface::vtable(self).SetCast)(
                    windows_core::Interface::as_raw(self),
                    pretval.param().abi(),
                )
                .ok()
            }
            pub unsafe fn AvailableCasts(&self) -> windows_core::Result<IStringArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).AvailableCasts)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Speak<P0>(&self, text: P0) -> windows_core::Result<ISpeakingState2>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Speak)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Stop(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Stop)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn GetTextDuration<P0>(&self, text: P0) -> windows_core::Result<f64>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).GetTextDuration)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn GetPhonemes<P0>(
                &self,
                text: P0,
            ) -> windows_core::Result<IPhonemeDataArray2>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).GetPhonemes)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn OutputWaveToFile<P0, P1>(
                &self,
                text: P0,
                path: P1,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>
            where
                P0: windows_core::Param<windows_core::BSTR>,
                P1: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).OutputWaveToFile)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    path.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        #[repr(C)]
        pub struct ITalker2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Volume: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetVolume:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Speed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetSpeed:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Tone: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetTone:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Alpha: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetAlpha:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Components: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Cast: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub SetCast: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub AvailableCasts: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Speak: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Stop: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub GetTextDuration: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut f64,
            ) -> windows_core::HRESULT,
            pub GetPhonemes: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub OutputWaveToFile: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ITalker2V40,
            ITalker2V40_Vtbl,
            0x38c647a8_39ec_433e_94c2_83e532f10ca1
        );
        impl core::ops::Deref for ITalker2V40 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ITalker2V40,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ITalker2V40 {
            pub unsafe fn Volume(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Volume)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetVolume(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetVolume)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Speed(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Speed)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetSpeed(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetSpeed)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Tone(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Tone)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetTone(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetTone)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Alpha(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Alpha)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetAlpha(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetAlpha)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn ToneScale(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).ToneScale)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetToneScale(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetToneScale)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
            pub unsafe fn Components(&self) -> windows_core::Result<ITalkerComponentArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Components)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Cast(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Cast)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn SetCast<P0>(&self, pretval: P0) -> windows_core::Result<()>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                (windows_core::Interface::vtable(self).SetCast)(
                    windows_core::Interface::as_raw(self),
                    pretval.param().abi(),
                )
                .ok()
            }
            pub unsafe fn AvailableCasts(&self) -> windows_core::Result<IStringArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).AvailableCasts)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Speak<P0>(&self, text: P0) -> windows_core::Result<ISpeakingState2>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Speak)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Stop(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Stop)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn GetTextDuration<P0>(&self, text: P0) -> windows_core::Result<f64>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).GetTextDuration)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn GetPhonemes<P0>(
                &self,
                text: P0,
            ) -> windows_core::Result<IPhonemeDataArray2>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).GetPhonemes)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn OutputWaveToFile<P0, P1>(
                &self,
                text: P0,
                path: P1,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>
            where
                P0: windows_core::Param<windows_core::BSTR>,
                P1: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).OutputWaveToFile)(
                    windows_core::Interface::as_raw(self),
                    text.param().abi(),
                    path.param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        #[repr(C)]
        pub struct ITalker2V40_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Volume: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetVolume:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Speed: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetSpeed:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Tone: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetTone:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Alpha: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetAlpha:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub ToneScale: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetToneScale:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
            pub Components: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Cast: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub SetCast: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub AvailableCasts: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Speak: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Stop: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
            pub GetTextDuration: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut f64,
            ) -> windows_core::HRESULT,
            pub GetPhonemes: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub OutputWaveToFile: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ITalker2V40Part,
            ITalker2V40Part_Vtbl,
            0x247e9bbe_530b_4e02_94f9_22aec45b7ad5
        );
        impl core::ops::Deref for ITalker2V40Part {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ITalker2V40Part,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ITalker2V40Part {
            pub unsafe fn ToneScale(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).ToneScale)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetToneScale(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetToneScale)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct ITalker2V40Part_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub ToneScale: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetToneScale:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ITalkerComponent2,
            ITalkerComponent2_Vtbl,
            0x0fb8c1a2_4895_4ef1_9ac5_71cc45ec61b9
        );
        impl core::ops::Deref for ITalkerComponent2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ITalkerComponent2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ITalkerComponent2 {
            pub unsafe fn Id(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Id)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Name(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Name)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Value(&self) -> windows_core::Result<u32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Value)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn SetValue(&self, pretval: u32) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).SetValue)(
                    windows_core::Interface::as_raw(self),
                    pretval,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct ITalkerComponent2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Id: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub Name: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::mem::MaybeUninit<windows_core::BSTR>,
            ) -> windows_core::HRESULT,
            pub Value: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut u32,
            ) -> windows_core::HRESULT,
            pub SetValue:
                unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        }
        windows_core::imp::define_interface!(
            ITalkerComponentArray2,
            ITalkerComponentArray2_Vtbl,
            0x50d7ab4e_0d5e_4fce_b809_e784c58e5355
        );
        impl core::ops::Deref for ITalkerComponentArray2 {
            type Target = windows::Win32::System::Com::IDispatch;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(
            ITalkerComponentArray2,
            windows_core::IUnknown,
            windows::Win32::System::Com::IDispatch
        );
        impl ITalkerComponentArray2 {
            pub unsafe fn Length(&self) -> windows_core::Result<i32> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Length)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| result__)
            }
            pub unsafe fn At(&self, index: i32) -> windows_core::Result<ITalkerComponent2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).At)(
                    windows_core::Interface::as_raw(self),
                    index,
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn ByName<P0>(&self, name: P0) -> windows_core::Result<ITalkerComponent2>
            where
                P0: windows_core::Param<windows_core::BSTR>,
            {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).ByName)(
                    windows_core::Interface::as_raw(self),
                    name.param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
            pub unsafe fn Duplicate(&self) -> windows_core::Result<ITalkerComponentArray2> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).Duplicate)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        #[repr(C)]
        pub struct ITalkerComponentArray2_Vtbl {
            pub base__: windows::Win32::System::Com::IDispatch_Vtbl,
            pub Length: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut i32,
            ) -> windows_core::HRESULT,
            pub At: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                i32,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub ByName: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                core::mem::MaybeUninit<windows_core::BSTR>,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub Duplicate: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
        }
        pub trait IPhonemeData2_Impl: Sized + windows::Win32::System::Com::IDispatch_Impl {
            fn Phoneme(&self) -> windows_core::Result<windows_core::BSTR>;
            fn StartTime(&self) -> windows_core::Result<f64>;
            fn EndTime(&self) -> windows_core::Result<f64>;
        }
        impl windows_core::RuntimeName for IPhonemeData2 {}
        impl IPhonemeData2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IPhonemeData2_Impl,
                const OFFSET: isize,
            >() -> IPhonemeData2_Vtbl {
                unsafe extern "system" fn Phoneme<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeData2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeData2_Impl::Phoneme(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn StartTime<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeData2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut f64,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeData2_Impl::StartTime(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn EndTime<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeData2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut f64,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeData2_Impl::EndTime(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Phoneme: Phoneme::<Identity, Impl, OFFSET>,
                    StartTime: StartTime::<Identity, Impl, OFFSET>,
                    EndTime: EndTime::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IPhonemeData2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait IPhonemeDataArray2_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn Length(&self) -> windows_core::Result<i32>;
            fn At(&self, index: i32) -> windows_core::Result<IPhonemeData2>;
            fn Duplicate(&self) -> windows_core::Result<IPhonemeDataArray2>;
        }
        impl windows_core::RuntimeName for IPhonemeDataArray2 {}
        impl IPhonemeDataArray2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IPhonemeDataArray2_Impl,
                const OFFSET: isize,
            >() -> IPhonemeDataArray2_Vtbl {
                unsafe extern "system" fn Length<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeDataArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeDataArray2_Impl::Length(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn At<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeDataArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    index: i32,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeDataArray2_Impl::At(this, core::mem::transmute_copy(&index)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Duplicate<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IPhonemeDataArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IPhonemeDataArray2_Impl::Duplicate(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Length: Length::<Identity, Impl, OFFSET>,
                    At: At::<Identity, Impl, OFFSET>,
                    Duplicate: Duplicate::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IPhonemeDataArray2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait IServiceControl2_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn IsHostStarted(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn StartHost(
                &self,
                nowait: windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::Result<i32>;
            fn CloseHost(&self, mode: i32) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for IServiceControl2 {}
        impl IServiceControl2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IServiceControl2_Impl,
                const OFFSET: isize,
            >() -> IServiceControl2_Vtbl {
                unsafe extern "system" fn IsHostStarted<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2_Impl::IsHostStarted(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn StartHost<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    nowait: windows::Win32::Foundation::VARIANT_BOOL,
                    pretval: *mut i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2_Impl::StartHost(this, core::mem::transmute_copy(&nowait))
                    {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn CloseHost<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    mode: i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    IServiceControl2_Impl::CloseHost(this, core::mem::transmute_copy(&mode)).into()
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    IsHostStarted: IsHostStarted::<Identity, Impl, OFFSET>,
                    StartHost: StartHost::<Identity, Impl, OFFSET>,
                    CloseHost: CloseHost::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IServiceControl2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait IServiceControl2V40_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn HostVersion(&self) -> windows_core::Result<windows_core::BSTR>;
            fn InterfaceVersion(&self) -> windows_core::Result<windows_core::BSTR>;
            fn IsHostStarted(
                &self,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn StartHost(
                &self,
                nowait: windows::Win32::Foundation::VARIANT_BOOL,
            ) -> windows_core::Result<i32>;
            fn CloseHost(&self, mode: i32) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for IServiceControl2V40 {}
        impl IServiceControl2V40_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IServiceControl2V40_Impl,
                const OFFSET: isize,
            >() -> IServiceControl2V40_Vtbl {
                unsafe extern "system" fn HostVersion<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40_Impl::HostVersion(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn InterfaceVersion<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40_Impl::InterfaceVersion(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn IsHostStarted<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40_Impl::IsHostStarted(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn StartHost<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    nowait: windows::Win32::Foundation::VARIANT_BOOL,
                    pretval: *mut i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40_Impl::StartHost(
                        this,
                        core::mem::transmute_copy(&nowait),
                    ) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn CloseHost<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    mode: i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    IServiceControl2V40_Impl::CloseHost(this, core::mem::transmute_copy(&mode))
                        .into()
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    HostVersion: HostVersion::<Identity, Impl, OFFSET>,
                    InterfaceVersion: InterfaceVersion::<Identity, Impl, OFFSET>,
                    IsHostStarted: IsHostStarted::<Identity, Impl, OFFSET>,
                    StartHost: StartHost::<Identity, Impl, OFFSET>,
                    CloseHost: CloseHost::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IServiceControl2V40 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait IServiceControl2V40Part_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn HostVersion(&self) -> windows_core::Result<windows_core::BSTR>;
            fn InterfaceVersion(&self) -> windows_core::Result<windows_core::BSTR>;
        }
        impl windows_core::RuntimeName for IServiceControl2V40Part {}
        impl IServiceControl2V40Part_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IServiceControl2V40Part_Impl,
                const OFFSET: isize,
            >() -> IServiceControl2V40Part_Vtbl {
                unsafe extern "system" fn HostVersion<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40Part_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40Part_Impl::HostVersion(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn InterfaceVersion<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IServiceControl2V40Part_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IServiceControl2V40Part_Impl::InterfaceVersion(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    HostVersion: HostVersion::<Identity, Impl, OFFSET>,
                    InterfaceVersion: InterfaceVersion::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IServiceControl2V40Part as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ISpeakingState2_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn IsSucceeded(&self)
                -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn IsCompleted(&self)
                -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn Wait(&self) -> windows_core::Result<()>;
            fn Wait_2(&self, timeoutseconds: f64) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for ISpeakingState2 {}
        impl ISpeakingState2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISpeakingState2_Impl,
                const OFFSET: isize,
            >() -> ISpeakingState2_Vtbl {
                unsafe extern "system" fn IsSucceeded<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ISpeakingState2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ISpeakingState2_Impl::IsSucceeded(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn IsCompleted<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ISpeakingState2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ISpeakingState2_Impl::IsCompleted(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Wait<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ISpeakingState2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ISpeakingState2_Impl::Wait(this).into()
                }
                unsafe extern "system" fn Wait_2<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ISpeakingState2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    timeoutseconds: f64,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ISpeakingState2_Impl::Wait_2(this, core::mem::transmute_copy(&timeoutseconds))
                        .into()
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    IsSucceeded: IsSucceeded::<Identity, Impl, OFFSET>,
                    IsCompleted: IsCompleted::<Identity, Impl, OFFSET>,
                    Wait: Wait::<Identity, Impl, OFFSET>,
                    Wait_2: Wait_2::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ISpeakingState2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait IStringArray2_Impl: Sized + windows::Win32::System::Com::IDispatch_Impl {
            fn Length(&self) -> windows_core::Result<i32>;
            fn At(&self, index: i32) -> windows_core::Result<windows_core::BSTR>;
            fn Duplicate(&self) -> windows_core::Result<IStringArray2>;
        }
        impl windows_core::RuntimeName for IStringArray2 {}
        impl IStringArray2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IStringArray2_Impl,
                const OFFSET: isize,
            >() -> IStringArray2_Vtbl {
                unsafe extern "system" fn Length<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IStringArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IStringArray2_Impl::Length(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn At<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IStringArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    index: i32,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IStringArray2_Impl::At(this, core::mem::transmute_copy(&index)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Duplicate<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IStringArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match IStringArray2_Impl::Duplicate(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Length: Length::<Identity, Impl, OFFSET>,
                    At: At::<Identity, Impl, OFFSET>,
                    Duplicate: Duplicate::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IStringArray2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ITalker2_Impl: Sized + windows::Win32::System::Com::IDispatch_Impl {
            fn Volume(&self) -> windows_core::Result<u32>;
            fn SetVolume(&self, pretval: u32) -> windows_core::Result<()>;
            fn Speed(&self) -> windows_core::Result<u32>;
            fn SetSpeed(&self, pretval: u32) -> windows_core::Result<()>;
            fn Tone(&self) -> windows_core::Result<u32>;
            fn SetTone(&self, pretval: u32) -> windows_core::Result<()>;
            fn Alpha(&self) -> windows_core::Result<u32>;
            fn SetAlpha(&self, pretval: u32) -> windows_core::Result<()>;
            fn Components(&self) -> windows_core::Result<ITalkerComponentArray2>;
            fn Cast(&self) -> windows_core::Result<windows_core::BSTR>;
            fn SetCast(&self, pretval: &windows_core::BSTR) -> windows_core::Result<()>;
            fn AvailableCasts(&self) -> windows_core::Result<IStringArray2>;
            fn Speak(&self, text: &windows_core::BSTR) -> windows_core::Result<ISpeakingState2>;
            fn Stop(&self) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn GetTextDuration(&self, text: &windows_core::BSTR) -> windows_core::Result<f64>;
            fn GetPhonemes(
                &self,
                text: &windows_core::BSTR,
            ) -> windows_core::Result<IPhonemeDataArray2>;
            fn OutputWaveToFile(
                &self,
                text: &windows_core::BSTR,
                path: &windows_core::BSTR,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
        }
        impl windows_core::RuntimeName for ITalker2 {}
        impl ITalker2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ITalker2_Impl,
                const OFFSET: isize,
            >() -> ITalker2_Vtbl {
                unsafe extern "system" fn Volume<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Volume(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetVolume<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2_Impl::SetVolume(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Speed<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Speed(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetSpeed<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2_Impl::SetSpeed(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Tone<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Tone(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetTone<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2_Impl::SetTone(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Alpha<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Alpha(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetAlpha<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2_Impl::SetAlpha(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Components<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Components(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Cast<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Cast(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetCast<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2_Impl::SetCast(this, core::mem::transmute(&pretval)).into()
                }
                unsafe extern "system" fn AvailableCasts<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::AvailableCasts(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Speak<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Speak(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Stop<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::Stop(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetTextDuration<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut f64,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::GetTextDuration(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetPhonemes<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::GetPhonemes(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn OutputWaveToFile<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    path: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2_Impl::OutputWaveToFile(
                        this,
                        core::mem::transmute(&text),
                        core::mem::transmute(&path),
                    ) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Volume: Volume::<Identity, Impl, OFFSET>,
                    SetVolume: SetVolume::<Identity, Impl, OFFSET>,
                    Speed: Speed::<Identity, Impl, OFFSET>,
                    SetSpeed: SetSpeed::<Identity, Impl, OFFSET>,
                    Tone: Tone::<Identity, Impl, OFFSET>,
                    SetTone: SetTone::<Identity, Impl, OFFSET>,
                    Alpha: Alpha::<Identity, Impl, OFFSET>,
                    SetAlpha: SetAlpha::<Identity, Impl, OFFSET>,
                    Components: Components::<Identity, Impl, OFFSET>,
                    Cast: Cast::<Identity, Impl, OFFSET>,
                    SetCast: SetCast::<Identity, Impl, OFFSET>,
                    AvailableCasts: AvailableCasts::<Identity, Impl, OFFSET>,
                    Speak: Speak::<Identity, Impl, OFFSET>,
                    Stop: Stop::<Identity, Impl, OFFSET>,
                    GetTextDuration: GetTextDuration::<Identity, Impl, OFFSET>,
                    GetPhonemes: GetPhonemes::<Identity, Impl, OFFSET>,
                    OutputWaveToFile: OutputWaveToFile::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ITalker2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ITalker2V40_Impl: Sized + windows::Win32::System::Com::IDispatch_Impl {
            fn Volume(&self) -> windows_core::Result<u32>;
            fn SetVolume(&self, pretval: u32) -> windows_core::Result<()>;
            fn Speed(&self) -> windows_core::Result<u32>;
            fn SetSpeed(&self, pretval: u32) -> windows_core::Result<()>;
            fn Tone(&self) -> windows_core::Result<u32>;
            fn SetTone(&self, pretval: u32) -> windows_core::Result<()>;
            fn Alpha(&self) -> windows_core::Result<u32>;
            fn SetAlpha(&self, pretval: u32) -> windows_core::Result<()>;
            fn ToneScale(&self) -> windows_core::Result<u32>;
            fn SetToneScale(&self, pretval: u32) -> windows_core::Result<()>;
            fn Components(&self) -> windows_core::Result<ITalkerComponentArray2>;
            fn Cast(&self) -> windows_core::Result<windows_core::BSTR>;
            fn SetCast(&self, pretval: &windows_core::BSTR) -> windows_core::Result<()>;
            fn AvailableCasts(&self) -> windows_core::Result<IStringArray2>;
            fn Speak(&self, text: &windows_core::BSTR) -> windows_core::Result<ISpeakingState2>;
            fn Stop(&self) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
            fn GetTextDuration(&self, text: &windows_core::BSTR) -> windows_core::Result<f64>;
            fn GetPhonemes(
                &self,
                text: &windows_core::BSTR,
            ) -> windows_core::Result<IPhonemeDataArray2>;
            fn OutputWaveToFile(
                &self,
                text: &windows_core::BSTR,
                path: &windows_core::BSTR,
            ) -> windows_core::Result<windows::Win32::Foundation::VARIANT_BOOL>;
        }
        impl windows_core::RuntimeName for ITalker2V40 {}
        impl ITalker2V40_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ITalker2V40_Impl,
                const OFFSET: isize,
            >() -> ITalker2V40_Vtbl {
                unsafe extern "system" fn Volume<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Volume(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetVolume<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetVolume(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Speed<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Speed(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetSpeed<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetSpeed(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Tone<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Tone(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetTone<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetTone(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Alpha<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Alpha(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetAlpha<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetAlpha(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn ToneScale<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::ToneScale(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetToneScale<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetToneScale(this, core::mem::transmute_copy(&pretval)).into()
                }
                unsafe extern "system" fn Components<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Components(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Cast<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Cast(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetCast<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40_Impl::SetCast(this, core::mem::transmute(&pretval)).into()
                }
                unsafe extern "system" fn AvailableCasts<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::AvailableCasts(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Speak<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Speak(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Stop<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::Stop(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetTextDuration<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut f64,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::GetTextDuration(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetPhonemes<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::GetPhonemes(this, core::mem::transmute(&text)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn OutputWaveToFile<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    text: core::mem::MaybeUninit<windows_core::BSTR>,
                    path: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut windows::Win32::Foundation::VARIANT_BOOL,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40_Impl::OutputWaveToFile(
                        this,
                        core::mem::transmute(&text),
                        core::mem::transmute(&path),
                    ) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Volume: Volume::<Identity, Impl, OFFSET>,
                    SetVolume: SetVolume::<Identity, Impl, OFFSET>,
                    Speed: Speed::<Identity, Impl, OFFSET>,
                    SetSpeed: SetSpeed::<Identity, Impl, OFFSET>,
                    Tone: Tone::<Identity, Impl, OFFSET>,
                    SetTone: SetTone::<Identity, Impl, OFFSET>,
                    Alpha: Alpha::<Identity, Impl, OFFSET>,
                    SetAlpha: SetAlpha::<Identity, Impl, OFFSET>,
                    ToneScale: ToneScale::<Identity, Impl, OFFSET>,
                    SetToneScale: SetToneScale::<Identity, Impl, OFFSET>,
                    Components: Components::<Identity, Impl, OFFSET>,
                    Cast: Cast::<Identity, Impl, OFFSET>,
                    SetCast: SetCast::<Identity, Impl, OFFSET>,
                    AvailableCasts: AvailableCasts::<Identity, Impl, OFFSET>,
                    Speak: Speak::<Identity, Impl, OFFSET>,
                    Stop: Stop::<Identity, Impl, OFFSET>,
                    GetTextDuration: GetTextDuration::<Identity, Impl, OFFSET>,
                    GetPhonemes: GetPhonemes::<Identity, Impl, OFFSET>,
                    OutputWaveToFile: OutputWaveToFile::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ITalker2V40 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ITalker2V40Part_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn ToneScale(&self) -> windows_core::Result<u32>;
            fn SetToneScale(&self, pretval: u32) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for ITalker2V40Part {}
        impl ITalker2V40Part_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ITalker2V40Part_Impl,
                const OFFSET: isize,
            >() -> ITalker2V40Part_Vtbl {
                unsafe extern "system" fn ToneScale<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40Part_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalker2V40Part_Impl::ToneScale(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetToneScale<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalker2V40Part_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalker2V40Part_Impl::SetToneScale(this, core::mem::transmute_copy(&pretval))
                        .into()
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    ToneScale: ToneScale::<Identity, Impl, OFFSET>,
                    SetToneScale: SetToneScale::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ITalker2V40Part as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ITalkerComponent2_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn Id(&self) -> windows_core::Result<windows_core::BSTR>;
            fn Name(&self) -> windows_core::Result<windows_core::BSTR>;
            fn Value(&self) -> windows_core::Result<u32>;
            fn SetValue(&self, pretval: u32) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for ITalkerComponent2 {}
        impl ITalkerComponent2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ITalkerComponent2_Impl,
                const OFFSET: isize,
            >() -> ITalkerComponent2_Vtbl {
                unsafe extern "system" fn Id<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponent2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponent2_Impl::Id(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Name<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponent2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut core::mem::MaybeUninit<windows_core::BSTR>,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponent2_Impl::Name(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Value<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponent2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponent2_Impl::Value(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn SetValue<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponent2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: u32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    ITalkerComponent2_Impl::SetValue(this, core::mem::transmute_copy(&pretval))
                        .into()
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Id: Id::<Identity, Impl, OFFSET>,
                    Name: Name::<Identity, Impl, OFFSET>,
                    Value: Value::<Identity, Impl, OFFSET>,
                    SetValue: SetValue::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ITalkerComponent2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
        pub trait ITalkerComponentArray2_Impl:
            Sized + windows::Win32::System::Com::IDispatch_Impl
        {
            fn Length(&self) -> windows_core::Result<i32>;
            fn At(&self, index: i32) -> windows_core::Result<ITalkerComponent2>;
            fn ByName(&self, name: &windows_core::BSTR) -> windows_core::Result<ITalkerComponent2>;
            fn Duplicate(&self) -> windows_core::Result<ITalkerComponentArray2>;
        }
        impl windows_core::RuntimeName for ITalkerComponentArray2 {}
        impl ITalkerComponentArray2_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ITalkerComponentArray2_Impl,
                const OFFSET: isize,
            >() -> ITalkerComponentArray2_Vtbl {
                unsafe extern "system" fn Length<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponentArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut i32,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponentArray2_Impl::Length(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn At<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponentArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    index: i32,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponentArray2_Impl::At(this, core::mem::transmute_copy(&index)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn ByName<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponentArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    name: core::mem::MaybeUninit<windows_core::BSTR>,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponentArray2_Impl::ByName(this, core::mem::transmute(&name)) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn Duplicate<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: ITalkerComponentArray2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    pretval: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    match ITalkerComponentArray2_Impl::Duplicate(this) {
                        Ok(ok__) => {
                            core::ptr::write(pretval, core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                Self {
                    base__: windows::Win32::System::Com::IDispatch_Vtbl::new::<
                        Identity,
                        Impl,
                        OFFSET,
                    >(),
                    Length: Length::<Identity, Impl, OFFSET>,
                    At: At::<Identity, Impl, OFFSET>,
                    ByName: ByName::<Identity, Impl, OFFSET>,
                    Duplicate: Duplicate::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<ITalkerComponentArray2 as windows_core::Interface>::IID
                    || iid
                        == &<windows::Win32::System::Com::IDispatch as windows_core::Interface>::IID
            }
        }
    }
}
